library(readxl)
cards <- read_excel("cards.xlsx")
View(cards)
## Probability Distributions
## Normal Distribution
## Suppose the number of hours of sleep is normally distributed
## With a mean (mu) equal to 7.5
## and a standard deviation (sigma) equal to 1.2
mu = 7.5
sigma = 1.2
## What is the probability that a student sleeps more than 12 hours a day?
7.5 + (3*1.2)
7.5 - (3*1.2)
help(pnorm)
pnorm(12, mean = 7.5, sd = 1.2, lower.tail = TRUE)
pnorm(12, mean = 7.5, sd = 1.2, lower.tail = FALSE)
help(pt)
pt(3, df = 20, lower.tail = FALSE)
pnorm(2.9, mean =3.2, sd = .9)
pt(2, df = 5, lower.tail = FALSE)
2/sqrt(20)
pnorm(11, mean = 10, sd = .4472136, lower.tail = FALSE)
pnorm(75, mean = 70, sd = 2, lower.tail = FALSE)
y = c(50, 85, 60, 71, 56, 78, 90, 65, 45, 72)
mean(y)
sd(y)
help("t.test")
t.test(y, mu = 70, conf.level = .95)
6.1/sqrt(150)
pnorm(5.5, mean = 5.1, sd = .4980, lower.tale = FALSE)
pnorm(5.5, mean = 5.1, sd = .4980, lower.tail = FALSE)
pnorm(4, mean =5.1, sd = .4980, lower.tail = TRUE)
pnorm(5, mean =5.1, sd = .4980, lower.tail = TRUE)
1-pt(12.36,99)
setwd("C:/Users/pughb/Desktop/ISA 291")
training = read.csv("airbnb_training.csv")
validation = read.csv("airbnb_validation.csv")
training = training[which(training$price != 0), ]
training$log10price = log10(training$price)
validation$log10price = log10(validation$price)
validation = validation[which(validation$price != 0), ]
training$X = NULL
training$id = NULL
training$name = NULL
training$host_id = NULL
training$host_name = NULL
training$latitude = NULL
training$longitude = NULL
training$neighbourhood = NULL
training$last_review = NULL
str(training)
hist(training$price, breaks = 20)
hist(training$log10price, breaks = 20)
summary(training)
regall = lm(log10price ~ minimum_nights + neighbourhood_group + room_type + number_of_reviews + reviews_per_month + calculated_host_listings_count + availability_365, data = training)
regall_cor = cor(model.matrix(regall)[,-1])
regall_cor
library(car)
vif(regall)
library(corrplot)
corrplot(regall_cor)
training_reg_nolog = lm(price ~ minimum_nights + neighbourhood_group + room_type + number_of_reviews + availability_365+ availability_365:room_type + I(minimum_nights^2), data = training)
summary(training_reg_nolog)
training_reg = lm(log10price ~ minimum_nights + neighbourhood_group + room_type + number_of_reviews + availability_365+ availability_365:room_type + I(minimum_nights^2), data = training)
summary(training_reg)
predict_training = exp(predict(training_reg, newdata = training))
actual_training = training$price
residuals_training = actual_training - predict_training
RMSE = sqrt(sum(residuals_training^2 / 34204))
RMSE
mean(training_reg$residuals)
plot(training_reg)
hist(training_reg$residuals, xlab = "Residuals", main = "Histogram of E", col = "red")
validation_reg = lm(log10price ~ minimum_nights + neighbourhood_group + room_type + number_of_reviews + availability_365+ availability_365:room_type + I(minimum_nights^2), data = validation)
summary(validation_reg)
validation_model = predict(training_reg, newdata = validation)
actual_val = validation$log10price
residuals_validation_model = actual_val - validation_model
mean(residuals_validation_model)
training_reg = lm(log10price ~ minimum_nights + neighbourhood_group + room_type + number_of_reviews + availability_365+ availability_365:room_type + I(minimum_nights^2), data = training)
summary(training_reg)
mean(training_reg$residuals)
mean(training_reg$residuals)
mean(training_reg$residuals)
plot(training_reg$fitted.values, training_reg$residuals, main = "Residuals vs Fitted", xlab = "Fitted Values", ylab = "Residuals")
abline(0, 0, col = "red")
hist(training_reg$residuals, xlab = "Residuals", main = "Histogram of E")
hist(training_reg$residuals, xlab = "Residuals", main = "Histogram of E")
hist(training_reg$residuals, xlab = "Residuals", main = "Histogram of E", col = "red")
qqnorm(training_reg$residuals)
qqline(training_reg$residuals, col = "red")
validation_model = predict(training_reg, newdata = validation)
actual_val = validation$log10price
residuals_validation_model = actual_val - validation_model
mean(residuals_validation_model)
validation_model = predict(training_reg, newdata = validation)
actual_val = validation$log10price
residuals_validation_model = actual_val - validation_model
mean(residuals_validation_model)
install.packages(installr)
install.packages(installr)
setwd("~/ISA 616/Happiness/Happiness")
setwd("~/ISA 616/Happiness/Happiness")
Happiness = read.csv("HappyData.csv")
Happiness = read.csv("HappyData.csv", stringsAsFactors = TRUE)
View(Happiness)
install.packages("DataExplorer")
library(DataExplorer)
plot_missing(Happiness)
